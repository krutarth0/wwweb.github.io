{"version":3,"sources":["main.6d2ebaf3.chunk.css","index.css","App.scss","styles/breakpoints.scss","banner.scss","breakpoints.scss","header.scss","cards.scss"],"names":[],"mappings":"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","file":"main.6d2ebaf3.chunk.css","sourcesContent":["@import url(https://fonts.googleapis.com/css2?family=Tangerine&display=swap);\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n\nbody::-webkit-scrollbar{display:none}.wrapper{position:relative}.wrapper .upper-black{position:absolute;bottom:0;left:0;right:0;background:#000;z-index:10;height:100%;width:100%}.wrapper .upper-black:nth-child(2){left:33.333%}@media(max-width: 768px){.wrapper .upper-black:nth-child(2){display:none}}.wrapper .upper-black:nth-child(3){left:66.666%}@media(max-width: 768px){.wrapper .upper-black:nth-child(3){display:none}}.wrapper .lower-black{position:absolute;bottom:0;top:0;right:66.666%;background:#000;z-index:10;height:100%;width:100%}.wrapper .lower-black:nth-child(2){right:33.333%}.wrapper .lower-black:nth-child(3){right:0%}\n.banner{height:40vh;height:calc(1vh*35);height:calc(var(--vh,1vh)*35);background-color:#fff;padding:20px}.banner .heading{margin-left:10vw;display:flex;flex-flow:column nowrap}.banner .heading h2{z-index:10;color:#fff;mix-blend-mode:difference}.banner .heading h2 .line span{font-size:2.5rem}@media(max-width: 768px){.banner .heading h2 .line span{font-size:2rem}}@media(max-width: 360px){.banner .heading h2 .line span{font-size:1.5rem}}.banner .heading .more-info{font-size:1.5rem;display:flex}.banner .heading .more-info a{display:inline-block;color:#000;text-decoration:none;display:flex;align-items:center}@media(max-width: 768px){.banner .heading .more-info a{font-size:1rem}}@media(max-width: 360px){.banner .heading .more-info a{font-size:1rem}}.banner .heading .more-info a:hover svg{color:azure;background-color:#000}.banner .heading .more-info svg{margin-left:16px;border:1px solid #000;border-radius:50%;padding:8px;-webkit-transition:.3s ease-in-out;transition:.3s ease-in-out}@media(max-width: 768px){.banner .heading .more-info svg{font-size:1rem}}@media(max-width: 360px){.banner .heading .more-info svg{font-size:1rem}}\n.header{display:flex;height:60px;justify-content:space-between;align-items:center;padding:20px}.header .logo{margin-left:10vw;font-size:5rem;font-family:\"Tangerine\",cursive}.header .ham-nav{padding-top:15px;display:flex;justify-content:center;align-items:center;flex-flow:column nowrap;margin-right:10vw;cursor:pointer}.header .ham-nav:hover .top{-webkit-transform:translateY(-5px);transform:translateY(-5px)}.header .ham-nav .top{display:block;background-color:#000;height:.2vh;width:30px;margin-bottom:.5vh;-webkit-transition:.2s ease-in;transition:.2s ease-in}@media(max-width: 768px){.header .ham-nav .top{width:35px}}.header .ham-nav .bottom{display:block;background-color:#000;width:35px;height:.9vh;border-radius:10px}@media(max-width: 768px){.header .ham-nav .bottom{width:40px;height:.7vh}}\n.cards{display:flex;align-items:center}.cards .card-nav{display:flex;position:absolute;bottom:0px;justify-content:space-between;align-items:center;width:100%;align-items:center;z-index:6;box-sizing:border-box;padding:10px}@media(max-width: 768px){.cards .card-nav{display:none}}.cards .card-nav .card-nav-swipe{background:rgba(0,0,0,.4);height:72px;width:72px;border-radius:100%;display:flex;align-items:center;justify-content:center}.cards .card-nav .card-nav-swipe .svg{color:#fff;height:28px;width:28px}.cards .card-nav .card-nav-swipe:hover{color:#fff;cursor:pointer}.cards .cards-row{display:flex;overflow:auto;box-sizing:border-box}.cards .cards-row::-webkit-scrollbar{display:none}@media(max-width: 768px){.cards .cards-row{flex-flow:column nowrap}}.cards .cards-row .cards-container{position:relative;background:#000;cursor:pointer;min-width:33.33vw;height:50vh;height:calc(1vh * 46.5);height:calc(var(--vh, 1vh) * 46.5);overflow:hidden;box-sizing:border-box}@media(max-width: 768px){.cards .cards-row .cards-container{margin-left:0px;border-radius:0px;width:100vw}}.cards .cards-row .cards-container .card-detail{position:absolute;height:100%;color:#f0f8ff;width:90%;z-index:5;display:flex;flex-flow:column nowrap;justify-content:center;padding:30px}.cards .cards-row .cards-container .card-detail .card-company{opacity:.8}.cards .cards-row .cards-container .card-detail .card-headline{margin:0px}@media(max-width: 768px){.cards .cards-row .cards-container .card-detail{padding:10px}}.cards .cards-row .cards-container .card-img{top:0;left:0;height:100%;width:100%;overflow:hidden;position:absolute;opacity:.65;-webkit-transition:.4s cubic-bezier(0.6, -0.05, 0.1, 0.99);transition:.4s cubic-bezier(0.6, -0.05, 0.1, 0.99)}.cards .cards-row .cards-container .card-img img{height:100%;width:100%;object-fit:cover}\n","body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","@import \"./styles/breakpoints.scss\";\n\nbody::-webkit-scrollbar{\ndisplay: none;\n}\n\n//overlay\n.wrapper{\n  position: relative;\n  .upper-black{\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: black;\n    z-index: 10;\n    height: 100%;\n    width: 100%;\n    &:nth-child(2) {\n      left: 33.333%;\n      @include media('<=tablet'){\n        display: none;\n\n    }\n    }\n    &:nth-child(3) {\n      left: 66.666%;\n      @include media('<=tablet'){\n        display: none;\n\n    }\n  \n    }\n  }\n\n  .lower-black{\n    position: absolute;\n    bottom: 0;\n    top: 0;\n    right: 66.666%;\n    background: black;\n    z-index: 10;\n    height: 100%;\n    width: 100%;\n    &:nth-child(2) {\n      right: 33.333%;\n  \n    }\n    &:nth-child(3) {\n      right: 0%;\n  \n    }\n  }\n  \n}\n","\r\n$breakpoints: (\r\n    \"phone\": 360px,\r\n    \"tablet\": 768px,\r\n    \"desktop\": 1366px,\r\n    \"LGdesktop\": 1920px\r\n  ) !default;\r\n  \r\n  ///\r\n  /// Creates a list of static expressions or media types\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @example scss - Creates a single media type (screen)\r\n  ///  $media-expressions: ('screen': 'screen');\r\n  ///\r\n  /// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n  ///  $media-expressions: (\r\n  ///\t\t'retina2x': (\r\n  ///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\r\n  ///\t\t\t'(min-resolution: 192dpi)'\r\n  ///\t\t)\r\n  ///\t);\r\n  ///\r\n  $media-expressions: (\r\n    \"screen\": \"screen\",\r\n    \"print\": \"print\",\r\n    \"handheld\": \"handheld\",\r\n    \"retina2x\": (\r\n      \"(-webkit-min-device-pixel-ratio: 2)\",\r\n      \"(min-resolution: 192dpi)\"\r\n    ),\r\n    \"retina3x\": (\r\n      \"(-webkit-min-device-pixel-ratio: 3)\",\r\n      \"(min-resolution: 350dpi)\"\r\n    )\r\n  ) !default;\r\n  \r\n  ///\r\n  /// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @example scss - Interval for pixels is defined as `1` by default\r\n  ///  @include media(\">128px\") {}\r\n  ///\r\n  ///\t /* Generates: */\r\n  ///\t @media (min-width: 129px) {}\r\n  ///\r\n  /// @example scss - Interval for ems is defined as `0.01` by default\r\n  ///  @include media(\">20em\") {}\r\n  ///\r\n  ///\t /* Generates: */\r\n  ///\t @media (min-width: 20.01em) {}\r\n  ///\r\n  /// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n  ///  @include media(\">2.0rem\") {}\r\n  ///\r\n  ///\t /* Generates: */\r\n  ///\t @media (min-width: 2.1rem) {}\r\n  ///\r\n  $unit-intervals: (\r\n    \"px\": 1,\r\n    \"em\": 0.01,\r\n    \"rem\": 0.1\r\n  ) !default;\r\n  ///\r\n  /// Generates a media query based on a list of conditions\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @param {List}   $conditions  - Media query conditions\r\n  ///\r\n  /// @example scss - With a single set breakpoint\r\n  ///  @include media(\">phone\") { }\r\n  ///\r\n  /// @example scss - With two set breakpoints\r\n  ///  @include media(\">phone\", \"<=tablet\") { }\r\n  ///\r\n  /// @example scss - With custom values\r\n  ///  @include media(\">=358px\", \"<850px\") { }\r\n  ///\r\n  /// @example scss - With set breakpoints with custom values\r\n  ///  @include media(\">desktop\", \"<=1350px\") { }\r\n  ///\r\n  /// @example scss - With a static expression\r\n  ///  @include media(\"retina2x\") { }\r\n  ///\r\n  /// @example scss - Mixing everything\r\n  ///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\r\n  ///\r\n  @mixin media($conditions...) {\r\n    @for $i from 1 through length($conditions) {\r\n      $conditions: set-nth(\r\n        $conditions,\r\n        $i,\r\n        parse-expression(nth($conditions, $i))\r\n      );\r\n    }\r\n  \r\n    $branches: get-query-branches($conditions);\r\n    $query: \"\";\r\n  \r\n    @each $branch in $branches {\r\n      @if (str-length($query) != 0) {\r\n        $query: $query + \", \";\r\n      }\r\n  \r\n      $query: $query + $branch;\r\n    }\r\n  \r\n    @media #{$query} {\r\n      @content;\r\n    }\r\n  }\r\n  \r\n  ///\r\n  /// Reads a list of media query expressions and separates logical disjunctions into different branches\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @param {List}   $expressions  - list of expressions\r\n  ///\r\n  /// @throws `$expression` is not a valid expression\r\n  ///\r\n  /// @return {List | Null}\r\n  ///\r\n  @function get-query-branches($expressions) {\r\n    $result: \"\";\r\n    $has-groups: false;\r\n  \r\n    // Getting initial snapshot and looking for groups\r\n    @each $expression in $expressions {\r\n      @if (str-length($result) != 0) {\r\n        $result: $result + \" and \";\r\n      }\r\n  \r\n      @if (type-of($expression) == \"string\") {\r\n        $result: $result + $expression;\r\n      } @else if (type-of($expression) == \"list\") {\r\n        $result: $result + nth($expression, 1);\r\n        $has-groups: true;\r\n      } @else {\r\n        @warn '#{$expression} is not a valid expression.';\r\n      }\r\n    }\r\n  \r\n    // If we have groups, we have to create all possible combinations\r\n    @if $has-groups {\r\n      @each $expression in $expressions {\r\n        @if (type-of($expression) == \"list\") {\r\n          $first: nth($expression, 1);\r\n  \r\n          @each $member in $expression {\r\n            @if ($member != $first) {\r\n              @each $partial in $result {\r\n                $result: join(\r\n                  $result,\r\n                  str-replace-first($first, $member, $partial)\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    @return $result;\r\n  }\r\n  \r\n  ///\r\n  /// Parses a string to form a media query expression\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @param {String}   $expression  - expression (in string)\r\n  ///\r\n  /// @throws Expression with type `type-of($expression)` detected, string expected\r\n  /// @throws `$expression` is missing an operator\r\n  /// @throws Unknown unit: `$unit`\r\n  ///\r\n  /// @return {String | Null}\r\n  ///\r\n  @function parse-expression($expression) {\r\n    $operator: \"\";\r\n    $value: \"\";\r\n    $element: \"\";\r\n    $result: \"\";\r\n    $is-width: true;\r\n  \r\n    @if (type-of($expression) != \"string\") {\r\n      @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\r\n    }\r\n  \r\n    // Separating the operator from the rest of the expression\r\n    @if (str-slice($expression, 2, 2) == \"=\") {\r\n      $operator: str-slice($expression, 1, 2);\r\n      $value: str-slice($expression, 3);\r\n    } @else {\r\n      $operator: str-slice($expression, 1, 1);\r\n      $value: str-slice($expression, 2);\r\n    }\r\n  \r\n    // Checking what type of expression we're dealing with\r\n    @if map-has-key($breakpoints, $value) {\r\n      $result: map-get($breakpoints, $value);\r\n    } @else if map-has-key($media-expressions, $expression) {\r\n      $result: map-get($media-expressions, $expression);\r\n      $is-width: false;\r\n    } @else {\r\n      $result: to-number($value);\r\n    }\r\n  \r\n    @if ($is-width) {\r\n      $unit: unit($result);\r\n      $interval: 0;\r\n  \r\n      @if (map-has-key($unit-intervals, $unit)) {\r\n        $interval: map-get($unit-intervals, $unit);\r\n      } @else {\r\n        @warn 'Unknown unit: #{$unit}';\r\n      }\r\n  \r\n      @if ($operator == \">\") {\r\n        $element: \"(min-width: #{$result + $interval})\";\r\n      } @else if ($operator == \"<\") {\r\n        $element: \"(max-width: #{$result - $interval})\";\r\n      } @else if ($operator == \">=\") {\r\n        $element: \"(min-width: #{$result})\";\r\n      } @else if ($operator == \"<=\") {\r\n        $element: \"(max-width: #{$result})\";\r\n      } @else {\r\n        @warn '#{$expression} is missing an operator.';\r\n      }\r\n    } @else {\r\n      $element: $result;\r\n    }\r\n  \r\n    @return $element;\r\n  }\r\n  \r\n  ///\r\n  /// Replaces the first occurence of the string with the replacement string\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @param {String}   $search  - The value being searched for\r\n  /// @param {String}   $replace  - The replacement string\r\n  /// @param {String}   $subject  - The string being replaced on\r\n  ///\r\n  /// @return {String | Null}\r\n  ///\r\n  @function str-replace-first($search, $replace, $subject) {\r\n    $search-start: str-index($subject, $search);\r\n  \r\n    @if $search-start == null {\r\n      @return $subject;\r\n    }\r\n  \r\n    $result: str-slice($subject, 0, $search-start - 1);\r\n    $result: $result + $replace;\r\n    $result: $result + str-slice($subject, $search-start + str-length($search));\r\n  \r\n    @return $result;\r\n  }\r\n  \r\n  ///\r\n  /// Casts a number to a string\r\n  ///\r\n  /// @author Hugo Giraudel\r\n  ///\r\n  /// @param {String}   $string  - Number to be parsed\r\n  ///\r\n  /// @return {List | Null}\r\n  ///\r\n  @function to-number($string) {\r\n    // Matrices\r\n    $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\r\n    $numbers: 0 1 2 3 4 5 6 7 8 9;\r\n  \r\n    // Result\r\n    $result: 0;\r\n    $divider: 0;\r\n    $minus: false;\r\n  \r\n    // Looping through all characters\r\n    @for $i from 1 through str-length($string) {\r\n      $character: str-slice($string, $i, $i);\r\n      $index: index($strings, $character);\r\n  \r\n      @if $character == \"-\" {\r\n        $minus: true;\r\n      } @else if $character == \".\" {\r\n        $divider: 1;\r\n      } @else {\r\n        @if type-of($index) != \"number\" {\r\n          $result: if($minus, $result * -1, $result);\r\n          @return _length($result, str-slice($string, $i));\r\n        }\r\n  \r\n        $number: nth($numbers, $index);\r\n  \r\n        @if $divider == 0 {\r\n          $result: $result * 10;\r\n        } @else {\r\n          // Move the decimal dot to the left\r\n          $divider: $divider * 10;\r\n          $number: $number / $divider;\r\n        }\r\n  \r\n        $result: $result + $number;\r\n      }\r\n    }\r\n  \r\n    @return if($minus, $result * -1, $result);\r\n  }\r\n  \r\n  @function _length($number, $unit) {\r\n    $strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\r\n      \"vh\" \"vmin\" \"vmax\";\r\n    $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\r\n    $index: index($strings, $unit);\r\n  \r\n    @if type-of($index) != \"number\" {\r\n      @warn 'Unknown unit `#{$unit}`.';\r\n      @return false;\r\n    }\r\n  \r\n    @return $number * nth($units, $index);\r\n  }\r\n  \r\n  /**\r\n  *\r\n  * Testing\r\n  *\r\n  **/","\r\n@import \"../styles/breakpoints.scss\";\r\n.banner{\r\n    height: 40vh;\r\n    height: calc(var(--vh,1vh)*35);\r\n    background-color: white;\r\n    padding: 20px;\r\n    \r\n    .heading{\r\n        \r\n        margin-left: 10vw;\r\n        display: flex;\r\n        flex-flow: column nowrap;\r\n        \r\n        \r\n        h2{\r\n            z-index: 10;\r\n            color: white;\r\n            mix-blend-mode: difference;\r\n            .line{\r\n                // background-color: bisque;\r\n                span{\r\n                    font-size: 2.5rem;\r\n                    @include media('<=tablet'){\r\n                        font-size: 2rem;\r\n                    }\r\n                    @include media('<=phone'){\r\n                        font-size: 1.5rem;\r\n                    }\r\n                }\r\n        \r\n            }\r\n    \r\n        }\r\n\r\n\r\n\r\n        .more-info{\r\n            font-size: 1.5rem;\r\n            display: flex;\r\n            a{\r\n                // background-color: aquamarine;\r\n                display: inline-block;\r\n                color: black;\r\n                text-decoration: none;\r\n                display: flex;\r\n                align-items: center;\r\n                @include media('<=tablet'){\r\n                    font-size: 1rem;\r\n                }\r\n                @include media('<=phone'){\r\n                    font-size: 1rem;\r\n                }\r\n                &:hover{\r\n                    svg{\r\n                        color: azure;\r\n                        background-color: black;\r\n                    }\r\n                }\r\n\r\n            }\r\n            svg{\r\n            margin-left: 16px;\r\n            border: 1px solid black;\r\n            border-radius: 50%;\r\n            padding: 8px;\r\n            transition: 0.3s ease-in-out;\r\n\r\n            @include media('<=tablet'){\r\n                font-size: 1rem;\r\n            }\r\n            @include media('<=phone'){\r\n                font-size: 1rem;\r\n            }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}","\r\n$breakpoints: (\r\n    \"phone\": 360px,\r\n    \"tablet\": 768px,\r\n    \"desktop\": 1366px,\r\n    \"LGdesktop\": 1920px\r\n  ) !default;\r\n  \r\n  ///\r\n  /// Creates a list of static expressions or media types\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @example scss - Creates a single media type (screen)\r\n  ///  $media-expressions: ('screen': 'screen');\r\n  ///\r\n  /// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n  ///  $media-expressions: (\r\n  ///\t\t'retina2x': (\r\n  ///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\r\n  ///\t\t\t'(min-resolution: 192dpi)'\r\n  ///\t\t)\r\n  ///\t);\r\n  ///\r\n  $media-expressions: (\r\n    \"screen\": \"screen\",\r\n    \"print\": \"print\",\r\n    \"handheld\": \"handheld\",\r\n    \"retina2x\": (\r\n      \"(-webkit-min-device-pixel-ratio: 2)\",\r\n      \"(min-resolution: 192dpi)\"\r\n    ),\r\n    \"retina3x\": (\r\n      \"(-webkit-min-device-pixel-ratio: 3)\",\r\n      \"(min-resolution: 350dpi)\"\r\n    )\r\n  ) !default;\r\n  \r\n  ///\r\n  /// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @example scss - Interval for pixels is defined as `1` by default\r\n  ///  @include media(\">128px\") {}\r\n  ///\r\n  ///\t /* Generates: */\r\n  ///\t @media (min-width: 129px) {}\r\n  ///\r\n  /// @example scss - Interval for ems is defined as `0.01` by default\r\n  ///  @include media(\">20em\") {}\r\n  ///\r\n  ///\t /* Generates: */\r\n  ///\t @media (min-width: 20.01em) {}\r\n  ///\r\n  /// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n  ///  @include media(\">2.0rem\") {}\r\n  ///\r\n  ///\t /* Generates: */\r\n  ///\t @media (min-width: 2.1rem) {}\r\n  ///\r\n  $unit-intervals: (\r\n    \"px\": 1,\r\n    \"em\": 0.01,\r\n    \"rem\": 0.1\r\n  ) !default;\r\n  ///\r\n  /// Generates a media query based on a list of conditions\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @param {List}   $conditions  - Media query conditions\r\n  ///\r\n  /// @example scss - With a single set breakpoint\r\n  ///  @include media(\">phone\") { }\r\n  ///\r\n  /// @example scss - With two set breakpoints\r\n  ///  @include media(\">phone\", \"<=tablet\") { }\r\n  ///\r\n  /// @example scss - With custom values\r\n  ///  @include media(\">=358px\", \"<850px\") { }\r\n  ///\r\n  /// @example scss - With set breakpoints with custom values\r\n  ///  @include media(\">desktop\", \"<=1350px\") { }\r\n  ///\r\n  /// @example scss - With a static expression\r\n  ///  @include media(\"retina2x\") { }\r\n  ///\r\n  /// @example scss - Mixing everything\r\n  ///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\r\n  ///\r\n  @mixin media($conditions...) {\r\n    @for $i from 1 through length($conditions) {\r\n      $conditions: set-nth(\r\n        $conditions,\r\n        $i,\r\n        parse-expression(nth($conditions, $i))\r\n      );\r\n    }\r\n  \r\n    $branches: get-query-branches($conditions);\r\n    $query: \"\";\r\n  \r\n    @each $branch in $branches {\r\n      @if (str-length($query) != 0) {\r\n        $query: $query + \", \";\r\n      }\r\n  \r\n      $query: $query + $branch;\r\n    }\r\n  \r\n    @media #{$query} {\r\n      @content;\r\n    }\r\n  }\r\n  \r\n  ///\r\n  /// Reads a list of media query expressions and separates logical disjunctions into different branches\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @param {List}   $expressions  - list of expressions\r\n  ///\r\n  /// @throws `$expression` is not a valid expression\r\n  ///\r\n  /// @return {List | Null}\r\n  ///\r\n  @function get-query-branches($expressions) {\r\n    $result: \"\";\r\n    $has-groups: false;\r\n  \r\n    // Getting initial snapshot and looking for groups\r\n    @each $expression in $expressions {\r\n      @if (str-length($result) != 0) {\r\n        $result: $result + \" and \";\r\n      }\r\n  \r\n      @if (type-of($expression) == \"string\") {\r\n        $result: $result + $expression;\r\n      } @else if (type-of($expression) == \"list\") {\r\n        $result: $result + nth($expression, 1);\r\n        $has-groups: true;\r\n      } @else {\r\n        @warn '#{$expression} is not a valid expression.';\r\n      }\r\n    }\r\n  \r\n    // If we have groups, we have to create all possible combinations\r\n    @if $has-groups {\r\n      @each $expression in $expressions {\r\n        @if (type-of($expression) == \"list\") {\r\n          $first: nth($expression, 1);\r\n  \r\n          @each $member in $expression {\r\n            @if ($member != $first) {\r\n              @each $partial in $result {\r\n                $result: join(\r\n                  $result,\r\n                  str-replace-first($first, $member, $partial)\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    @return $result;\r\n  }\r\n  \r\n  ///\r\n  /// Parses a string to form a media query expression\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @param {String}   $expression  - expression (in string)\r\n  ///\r\n  /// @throws Expression with type `type-of($expression)` detected, string expected\r\n  /// @throws `$expression` is missing an operator\r\n  /// @throws Unknown unit: `$unit`\r\n  ///\r\n  /// @return {String | Null}\r\n  ///\r\n  @function parse-expression($expression) {\r\n    $operator: \"\";\r\n    $value: \"\";\r\n    $element: \"\";\r\n    $result: \"\";\r\n    $is-width: true;\r\n  \r\n    @if (type-of($expression) != \"string\") {\r\n      @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\r\n    }\r\n  \r\n    // Separating the operator from the rest of the expression\r\n    @if (str-slice($expression, 2, 2) == \"=\") {\r\n      $operator: str-slice($expression, 1, 2);\r\n      $value: str-slice($expression, 3);\r\n    } @else {\r\n      $operator: str-slice($expression, 1, 1);\r\n      $value: str-slice($expression, 2);\r\n    }\r\n  \r\n    // Checking what type of expression we're dealing with\r\n    @if map-has-key($breakpoints, $value) {\r\n      $result: map-get($breakpoints, $value);\r\n    } @else if map-has-key($media-expressions, $expression) {\r\n      $result: map-get($media-expressions, $expression);\r\n      $is-width: false;\r\n    } @else {\r\n      $result: to-number($value);\r\n    }\r\n  \r\n    @if ($is-width) {\r\n      $unit: unit($result);\r\n      $interval: 0;\r\n  \r\n      @if (map-has-key($unit-intervals, $unit)) {\r\n        $interval: map-get($unit-intervals, $unit);\r\n      } @else {\r\n        @warn 'Unknown unit: #{$unit}';\r\n      }\r\n  \r\n      @if ($operator == \">\") {\r\n        $element: \"(min-width: #{$result + $interval})\";\r\n      } @else if ($operator == \"<\") {\r\n        $element: \"(max-width: #{$result - $interval})\";\r\n      } @else if ($operator == \">=\") {\r\n        $element: \"(min-width: #{$result})\";\r\n      } @else if ($operator == \"<=\") {\r\n        $element: \"(max-width: #{$result})\";\r\n      } @else {\r\n        @warn '#{$expression} is missing an operator.';\r\n      }\r\n    } @else {\r\n      $element: $result;\r\n    }\r\n  \r\n    @return $element;\r\n  }\r\n  \r\n  ///\r\n  /// Replaces the first occurence of the string with the replacement string\r\n  ///\r\n  /// @author Eduardo Boucas\r\n  ///\r\n  /// @param {String}   $search  - The value being searched for\r\n  /// @param {String}   $replace  - The replacement string\r\n  /// @param {String}   $subject  - The string being replaced on\r\n  ///\r\n  /// @return {String | Null}\r\n  ///\r\n  @function str-replace-first($search, $replace, $subject) {\r\n    $search-start: str-index($subject, $search);\r\n  \r\n    @if $search-start == null {\r\n      @return $subject;\r\n    }\r\n  \r\n    $result: str-slice($subject, 0, $search-start - 1);\r\n    $result: $result + $replace;\r\n    $result: $result + str-slice($subject, $search-start + str-length($search));\r\n  \r\n    @return $result;\r\n  }\r\n  \r\n  ///\r\n  /// Casts a number to a string\r\n  ///\r\n  /// @author Hugo Giraudel\r\n  ///\r\n  /// @param {String}   $string  - Number to be parsed\r\n  ///\r\n  /// @return {List | Null}\r\n  ///\r\n  @function to-number($string) {\r\n    // Matrices\r\n    $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\r\n    $numbers: 0 1 2 3 4 5 6 7 8 9;\r\n  \r\n    // Result\r\n    $result: 0;\r\n    $divider: 0;\r\n    $minus: false;\r\n  \r\n    // Looping through all characters\r\n    @for $i from 1 through str-length($string) {\r\n      $character: str-slice($string, $i, $i);\r\n      $index: index($strings, $character);\r\n  \r\n      @if $character == \"-\" {\r\n        $minus: true;\r\n      } @else if $character == \".\" {\r\n        $divider: 1;\r\n      } @else {\r\n        @if type-of($index) != \"number\" {\r\n          $result: if($minus, $result * -1, $result);\r\n          @return _length($result, str-slice($string, $i));\r\n        }\r\n  \r\n        $number: nth($numbers, $index);\r\n  \r\n        @if $divider == 0 {\r\n          $result: $result * 10;\r\n        } @else {\r\n          // Move the decimal dot to the left\r\n          $divider: $divider * 10;\r\n          $number: $number / $divider;\r\n        }\r\n  \r\n        $result: $result + $number;\r\n      }\r\n    }\r\n  \r\n    @return if($minus, $result * -1, $result);\r\n  }\r\n  \r\n  @function _length($number, $unit) {\r\n    $strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\r\n      \"vh\" \"vmin\" \"vmax\";\r\n    $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\r\n    $index: index($strings, $unit);\r\n  \r\n    @if type-of($index) != \"number\" {\r\n      @warn 'Unknown unit `#{$unit}`.';\r\n      @return false;\r\n    }\r\n  \r\n    @return $number * nth($units, $index);\r\n  }\r\n  \r\n  /**\r\n  *\r\n  * Testing\r\n  *\r\n  **/","@import url('https://fonts.googleapis.com/css2?family=Tangerine&display=swap');\r\n@import \"../styles/breakpoints.scss\";\r\n  .header{\r\n    display: flex;\r\n    height: 60px;\r\n    // background-color: bisque;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n\r\n    .logo{\r\n        margin-left: 10vw;\r\n        font-size: 5rem;\r\n        font-family: 'Tangerine', cursive;\r\n    }\r\n    .ham-nav{\r\n        padding-top: 15px;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex-flow: column nowrap;\r\n        margin-right: 10vw;\r\n        \r\n        &:hover{\r\n            .top{\r\n                transform: translateY(-5px);\r\n            }\r\n        }\r\n        cursor: pointer;\r\n\r\n        .top{\r\n            display: block;\r\n            background-color: black;\r\n            height: 0.2vh;\r\n            width: 30px;\r\n            margin-bottom: 0.5vh;\r\n            transition: 0.2s ease-in;\r\n\r\n            @include media('<=tablet'){\r\n                width: 35px;\r\n                \r\n            }\r\n        }\r\n        .bottom{\r\n            display: block;\r\n            background-color: black;\r\n            width: 35px;\r\n            height: 0.9vh;\r\n            border-radius: 10px;\r\n            @include media('<=tablet'){\r\n                width: 40px;\r\n                height: 0.7vh;\r\n            }\r\n        }\r\n    }\r\n  }\r\n","@import \"../styles/breakpoints.scss\";\r\n\r\n.cards{\r\n    // padding: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    // height: 50vh;\r\n    // height: calc(var(--vh, 1vh) * 50);\r\n        .card-nav{\r\n            display: flex;\r\n            position: absolute;\r\n            bottom: 0px;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            width: 100%;\r\n            align-items: center;\r\n            z-index: 6;\r\n            box-sizing: border-box;\r\n            padding: 10px;\r\n            @include media('<=tablet'){\r\n                display: none;\r\n              \r\n            }\r\n            \r\n            .card-nav-swipe{\r\n                background: rgba(0, 0, 0, 0.4);\r\n                height: 72px;\r\n                width: 72px;\r\n                border-radius: 100%;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n\r\n                .svg {\r\n                    color: white;\r\n                    height: 28px;\r\n                    width: 28px;\r\n                    \r\n                  }\r\n                  &:hover{\r\n                    color: white;\r\n                    cursor: pointer;\r\n                }\r\n            }\r\n        }\r\n  \r\n\r\n    .cards-row{\r\n        display: flex;\r\n        overflow: auto;\r\n        box-sizing: border-box;\r\n        &::-webkit-scrollbar{\r\n            display: none;\r\n        }\r\n       \r\n\r\n        @include media('<=tablet'){\r\n            flex-flow: column nowrap;\r\n  \r\n        }\r\n            .cards-container{\r\n                position: relative;\r\n                background: black;\r\n                cursor: pointer;\r\n                min-width: 33.33vw;\r\n                height: 50vh;\r\n                height: calc(var(--vh, 1vh) * 46.5);\r\n                 overflow: hidden;\r\n                 box-sizing: border-box;\r\n                 @include media('<=tablet'){\r\n                    margin-left: 0px;\r\n                    border-radius: 0px;\r\n                    width: 100vw;\r\n                }\r\n    \r\n                .card-detail{\r\n                    position: absolute;\r\n                    height: 100%;\r\n                    color: aliceblue;\r\n                    width: 90%;\r\n                    z-index: 5;\r\n                    display: flex;\r\n                    flex-flow: column nowrap;\r\n                    justify-content: center;\r\n                    // align-items: center;\r\n                    padding: 30px;\r\n                    .card-company{\r\n                        opacity: 0.8;\r\n                    }\r\n                    .card-headline{\r\n                       margin: 0px;\r\n                    }\r\n                    @include media('<=tablet'){\r\n                        padding: 10px;\r\n                    }\r\n        \r\n                }\r\n                .card-img{\r\n                    top: 0;\r\n                    left: 0;\r\n                    height: 100%;\r\n                    width: 100%;\r\n                    overflow: hidden;\r\n                    position: absolute;\r\n                    opacity: 0.65;\r\n                     transition: 0.4s cubic-bezier(0.6, -0.05, 0.1, 0.99);\r\n                     \r\n                     img{\r\n                        height: 100%;\r\n                        width: 100%;\r\n                        object-fit: cover;\r\n\r\n                    }\r\n                   \r\n                }\r\n              \r\n          \r\n            }\r\n\r\n            \r\n\r\n    }\r\n\r\n  \r\n}"]}